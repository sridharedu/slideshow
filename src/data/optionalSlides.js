export const optionalSlides = [
  {
    title: "Why Optional?",
    points: [
      "‚úîÔ∏è Avoid `NullPointerException` ‚Äî main reason Optional was added",
      "`Optional<T>` ‚Üí container for possibly-null values",
      "Helps express: value is optional/absent/present clearly",
      "üî• Cleaner than null checks everywhere"
    ],
    note: "üß† Mention this in interviews ‚Äî Optional promotes *semantic clarity* in APIs",
    keepInMind: "Optional is a tool for writing more expressive and less error-prone code when dealing with potentially absent values."
  },
  {
    title: "Creating Optional",
    points: [
      "`Optional.of(val)` ‚Üí throws if val is null ‚ùå",
      "`Optional.ofNullable(val)` ‚Üí safe (null ‚Üí empty)",
      "`Optional.empty()` ‚Üí empty Optional instance",
      "üî• Always prefer `ofNullable` if input might be null"
    ],
    keepInMind: "`ofNullable` is your safest bet for creating an Optional from a variable that might be null."
  },
  {
    title: "Checking value",
    points: [
      "`isPresent()` ‚Üí true/false (but verbose)",
      "`ifPresent(val -> {...})` ‚Üí cleaner, executes only if value exists",
      "`ifPresentOrElse(...)` from Java 9",
      "üî• Avoid `get()` unless 100% sure it's present"
    ],
    keepInMind: "`ifPresent` is the idiomatic way to perform an action on a present value."
  },
  {
    title: "Default values",
    points: [
      "`orElse(default)` ‚Üí returns default if empty",
      "`orElseGet(() -> ...)` ‚Üí lazy version",
      "`orElseThrow()` ‚Üí throws NoSuchElementException",
      "`orElseThrow(() -> new CustomException())` ‚Üí custom exception"
    ],
    keepInMind: "Use `orElseGet` to avoid the cost of creating a default object if the Optional is not empty."
  },
  {
    title: "Map and FlatMap",
    points: [
      "`map(f)` ‚Üí transform the value if present",
      "`flatMap(f)` ‚Üí when f returns Optional again",
      "`opt.map(String::length).orElse(0)` ‚Üí safe transform",
      "üî• Use flatMap to chain calls returning Optional"
    ],
    keepInMind: "`map` is for transforming the value, `flatMap` is for transforming the Optional itself."
  },
  {
    title: "Filter values",
    points: [
      "`filter(pred)` ‚Üí keeps value if predicate is true",
      "`Optional.of(10).filter(x -> x > 5)` ‚Üí present(10)",
      "`Optional.of(3).filter(x -> x > 5)` ‚Üí empty"
    ],
    keepInMind: "`filter` allows you to conditionally keep or discard the value within the Optional."
  },
  {
    title: "Common mistakes",
    points: [
      "‚ùå Never use `Optional.get()` without `isPresent()`",
      "‚ùå Don't use Optional in fields / setters / serialization",
      "‚ùå Avoid wrapping collections inside Optional ‚Üí use empty list"
    ],
    note: "üß† Interview tip: Optional is for return values, NOT parameters or fields",
    keepInMind: "Using Optional correctly is as important as knowing when not to use it."
  },
  {
    title: "Use Case: Service Response",
    points: [
      "`public Optional<User> findUserById(String id)`",
      "‚Üí if user not found ‚Üí return Optional.empty()",
      "‚Üí caller decides what to do (default / throw / skip)",
      "üî• Avoids null return, caller always forced to think"
    ],
    keepInMind: "This is the primary and most powerful use case for Optional: signaling the potential absence of a return value."
  },
  {
    title: "Chaining Optionals",
    points: [
      "`repo.findUser().flatMap(User::getAddress).map(Address::getCity)`",
      "üî• Clean & readable null-safe navigation",
      "No need for nested `if` null checks"
    ],
    keepInMind: "This fluent, chainable style is what makes Optional so elegant for handling complex data structures."
  },
  {
    title: "When NOT to use Optional",
    points: [
      "In class fields (adds overhead)",
      "For method parameters ‚Üí just accept null",
      "For collections ‚Üí prefer empty list/set/map",
      "‚ùå Don't overuse ‚Üí only when absence is valid scenario"
    ],
    keepInMind: "Overusing Optional can lead to code that is more complex and less readable than simple null checks."
  }
];